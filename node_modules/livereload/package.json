{
  "name": "livereload",
  "description": "LiveReload server",
  "version": "0.4.1",
  "contributors": [
    {
      "name": "Brian P. Hogan",
      "email": "brianhogan@napcs.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/napcs/node-livereload/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/napcs/node-livereload.git"
  },
  "bin": {
    "livereload": "./bin/livereload.js"
  },
  "main": "./lib/livereload.js",
  "dependencies": {
    "chokidar": "^1.1.0",
    "opts": ">= 1.2.0",
    "ws": "^0.8.0"
  },
  "devDependencies": {
    "request": ">= 2.9.203",
    "should": ">= 0.6.3",
    "mocha": ">= 1.0.3",
    "coffee-script": ">= 1.8.0"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "\nnode-livereload\n===============\n\nAn implementation of the LiveReload server in Node.js. It's an alternative to the graphical [http://livereload.com/](http://livereload.com/) application, which monitors files for changes and reloads your web browser.\n\n# Example Usage\n\nYou can use this by either adding a snippet of code to the bottom of your HTML pages **or** install the Browser Extensions.\n\n## Method 1: Add browser extension\n\nInstall the LiveReload browser plugins by visiting [http://help.livereload.com/kb/general-use/browser-extensions](http://help.livereload.com/kb/general-use/browser-extensions).\n\nOnly Google Chrome supports viewing `file:///` URLS, and you have to specifically enable it. If you are using other browsers and want to use `file:///` URLs, add the JS code to the page as shown in the next section.\n\n## Method 2: Add code to page\n\nAdd this code:\n\n```\n<script>\n  document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] +\n  ':35729/livereload.js?snipver=1\"></' + 'script>')\n</script>\n```\n\nNote: If you are using a different port other than `35729` you will\nneed to change the above script.\n\n# Running LiveReload\n\nYou can run LiveReload two ways:\n\n## Option 1: Command line\n\nTo use livereload from the command line:\n\n    $ npm install -g livereload\n    $ livereload [path]\n\n\n## Option 2: From within your own project\n\nTo use the api within a project:\n\n    $ npm install livereload\n\nThen, create a server and fire it up.\n\n    livereload = require('livereload');\n    server = livereload.createServer();\n    server.watch(__dirname + \"/public\");\n\nYou can also use this with a Connect server. Here's an example of a simple server\nusing `connect` and a few other modules just to give you an idea:\n\n~~~\nvar connect  = require('connect');\nvar compiler = require('connect-compiler');\nvar static = require('serve-static');\n\nvar server = connect();\n\nserver.use(\n  compiler({\n      enabled : [ 'coffee', 'uglify' ],\n      src     : 'src',\n      dest    : 'public'\n  })\n);\n\nserver.use(  static(__dirname + '/public'));\n\nserver.listen(3000);\n\nlivereload = require('livereload');\nserver = livereload.createServer();\nserver.watch(__dirname + \"/public\");\n~~~\n\nYou can then start up the server which will listen on port `3000`.\n\n## Watching multiple paths:\n\nPassing an array of paths or glob patterns will allow you to watch multiple directories. All directories have the same configuration options.\n\n```js\nserver.watch([__dirname + \"/js\", __dirname + \"/css\"]);\n```\n\n## Using the `originalPath` option:\n\n```js\n// server.js\nvar server = livereload.createServer({\n    originalPath: \"http://domain.com\"\n});\nserver.watch('/User/Workspace/test');\n```\n\nThen run the server:\n\n`$ node server.js`\n\nThen, assuming your HTML file has a stylesheet link like this:\n\n```html\n<!-- html -->\n<head>\n    <link rel=\"stylesheet\" href=\"http://domain.com/css/style.css\">\n</head>\n```\n\nWhen `/User/Workspace/test/css/style.css` is modified, the stylesheet will be reload.\n\n# Command-line Options\n\nThe commandline options are\n\n* `-p` or `--port` to specify the listening port\n* `-d` or `--debug` to show debug messages when the browser reloads.\n* `-e` or `--exts` to include additional extentions that you want to observe. An example being -e 'jade scss'.  \n* `-u` or `--usepolling` to poll for file system changes. Set this to true to successfully watch files over a network.\n\nSpecify the path when using the options.\n\n~~~\n$ livereload . -i 200\n~~~\n\n\n# API Options\n\nThe `createServer()` method supports a few basic options, passed as a JavaScript object:\n\n* `https` is an optional object of options to be passed to [https.createServer](http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) (if not provided, `http.createServer` is used instead)\n* `port` is the listening port. It defaults to `35729` which is what the LiveReload extensions use currently.\n* `exts` is an array of extensions you want to observe. The default extensions are  `html`, `css`, `js`, `png`, `gif`, `jpg`,\n  `php`, `php5`, `py`, `rb`,  `erb`, and \"coffee.\"\n* `applyJSLive` tells LiveReload to reload JavaScript files in the background instead of reloading the page. The default for this is `false`.\n* `applyCSSLive` tells LiveReload to reload CSS files in the background instead of refreshing the page. The default for this is `true`.\n* `applyImgLive` tells LiveReload to reload image files in the background instead of refreshing the page. The default for this is `true`. Namely for these extensions: jpg, jpeg, png, gif\n* `exclusions` lets you specify files to ignore. By default, this includes `.git/`, `.svn/`, and `.hg/`\n* `originalPath` Set URL you use for development, e.g 'http:/domain.com', then LiveReload will proxy this url to local path.\n* `overrideURL` lets you specify a different host for CSS files. This lets you edit local CSS files but view a live site. See <http://feedback.livereload.com/knowledgebase/articles/86220-preview-css-changes-against-a-live-site-then-uplo> for details.\n* `usePolling` Poll for file system changes. Set this to true to successfully watch files over a network.\n\n\n\n# License\n\nCopyright (c) 2010-2014 Brian P. Hogan and Joshua Peek\n\nReleased under the MIT license. See `LICENSE` for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/napcs/node-livereload/issues"
  },
  "_id": "livereload@0.4.1",
  "_from": "livereload@~0.4.1"
}
